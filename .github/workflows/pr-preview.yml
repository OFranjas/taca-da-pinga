name: PR Preview

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-preview-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  preview:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest

    env:
      PREVIEW_CHANNEL: preview
      PREVIEW_SOURCE_SITE: taca-da-pinga
      PREVIEW_STATIC_SITE: preview-taca-da-pinga
      PREVIEW_CUSTOM_DOMAIN: preview-taca-da-pinga.web.app
      FIREBASE_DEFAULT_PROJECT: taca-da-pinga
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
      VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare Yarn 4
        run: corepack prepare yarn@4.3.1 --activate

      - name: Validate Firebase web config
        run: |
          missing=0
          for key in \
            VITE_FIREBASE_API_KEY \
            VITE_FIREBASE_AUTH_DOMAIN \
            VITE_FIREBASE_PROJECT_ID \
            VITE_FIREBASE_STORAGE_BUCKET \
            VITE_FIREBASE_MESSAGING_SENDER_ID \
            VITE_FIREBASE_APP_ID
          do
            if [ -z "${!key:-}" ]; then
              echo "::error::Missing secret: $key" >&2
              missing=1
            fi
          done

          if [ "$missing" -ne 0 ]; then
            echo "Firebase web configuration secrets are required for the preview build" >&2
            exit 1
          fi

      - name: Cache Yarn global cache
        uses: actions/cache@v4
        with:
          path: ~/.yarn/berry/cache
          key: ${{ runner.os }}-yarn-berry-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-berry-cache-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build
        run: yarn build

      - name: Configure Firebase credentials
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          if [ -z "${FIREBASE_SERVICE_ACCOUNT}" ]; then
            echo "Missing FIREBASE_SERVICE_ACCOUNT secret" >&2
            exit 1
          fi

          echo "${FIREBASE_SERVICE_ACCOUNT}" > "${HOME}/firebaseServiceAccount.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=${HOME}/firebaseServiceAccount.json" >> "${GITHUB_ENV}"

      - name: Ensure static preview site exists
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          STATIC_SITE: ${{ env.PREVIEW_STATIC_SITE }}
        run: |
          set -o errexit
          set -o pipefail

          PROJECT_ID="${FIREBASE_PROJECT_ID:-$FIREBASE_DEFAULT_PROJECT}"

          if [ -z "${PROJECT_ID}" ]; then
            echo "Missing Firebase project id" >&2
            exit 1
          fi

          ./node_modules/.bin/firebase hosting:sites:list --project "${PROJECT_ID}" --json > firebase-sites.json

          STATUS=$(node <<'NODE'
          const fs = require('fs');
          const payload = JSON.parse(fs.readFileSync('firebase-sites.json', 'utf8'));
          const sites = [];
          if (Array.isArray(payload?.result)) {
            sites.push(...payload.result);
          } else if (Array.isArray(payload?.result?.sites)) {
            sites.push(...payload.result.sites);
          } else if (Array.isArray(payload?.sites)) {
            sites.push(...payload.sites);
          }

          const target = process.env.STATIC_SITE;
          const found = sites.some((entry) => {
            if (!entry) return false;
            const name = typeof entry === 'string' ? entry : entry.name || entry.site || entry.id;
            if (!name) return false;
            return name === target || name.endsWith(`/${target}`);
          });

          process.stdout.write(found ? 'exists' : 'missing');
          NODE
          )

          if [ "${STATUS}" = "missing" ]; then
            echo "Creating hosting site ${STATIC_SITE} in project ${PROJECT_ID}" >&2
            ./node_modules/.bin/firebase hosting:sites:create "${STATIC_SITE}" --project "${PROJECT_ID}" --non-interactive || {
              echo "Failed to create hosting site ${STATIC_SITE}. Ensure the service account can manage hosting sites." >&2
              exit 1
            }
          fi

      - name: Deploy to Firebase preview channel
        id: deploy
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          set -o errexit
          set -o pipefail

          PROJECT_ID="${FIREBASE_PROJECT_ID:-$FIREBASE_DEFAULT_PROJECT}"
          if [ -z "${PROJECT_ID}" ]; then
            echo "Missing Firebase project id" >&2
            exit 1
          fi

          ./node_modules/.bin/firebase hosting:channel:deploy "${PREVIEW_CHANNEL}" --project "${PROJECT_ID}" --json | tee firebase-deploy.json

          node <<'NODE'
          const fs = require('fs');

          const payload = JSON.parse(fs.readFileSync('firebase-deploy.json', 'utf8'));

          const stack = [payload];
          const candidates = [];

          while (stack.length) {
            const current = stack.pop();
            if (!current) continue;

            if (Array.isArray(current)) {
              stack.push(...current);
              continue;
            }

            if (typeof current === 'object') {
              candidates.push(current);
              stack.push(...Object.values(current));
            }
          }

          const extractUrl = (obj) => {
            if (!obj || typeof obj !== 'object') return undefined;
            if (typeof obj.url === 'string' && obj.url.startsWith('http')) return obj.url;
            if (typeof obj.previewUrl === 'string' && obj.previewUrl.startsWith('http')) return obj.previewUrl;
            if (obj.hosting && typeof obj.hosting.url === 'string' && obj.hosting.url.startsWith('http')) {
              return obj.hosting.url;
            }
            if (obj.version && typeof obj.version === 'object') {
              const nested = extractUrl(obj.version);
              if (nested) return nested;
            }
            return undefined;
          };

          let url = candidates.map(extractUrl).find(Boolean);

          const preferred = process.env.PREVIEW_CUSTOM_DOMAIN;
          if (preferred) {
            url = preferred.startsWith('http') ? preferred : `https://${preferred}`;
          }

          if (!url) {
            throw new Error('Firebase deploy output missing preview URL: ' + JSON.stringify(payload));
          }

          fs.appendFileSync(process.env.GITHUB_OUTPUT, `preview_url=${url}\n`, 'utf8');
          NODE

      - name: Promote preview to static domain
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          set -o errexit
          set -o pipefail

          PROJECT_ID="${FIREBASE_PROJECT_ID:-$FIREBASE_DEFAULT_PROJECT}"
          if [ -z "${PROJECT_ID}" ]; then
            echo "Missing Firebase project id" >&2
            exit 1
          fi
          SOURCE_SITE="${PREVIEW_SOURCE_SITE}"
          STATIC_SITE="${PREVIEW_STATIC_SITE}"

          if [ -z "${SOURCE_SITE}" ] || [ -z "${STATIC_SITE}" ]; then
            echo "Preview source and static site IDs must be provided" >&2
            exit 1
          fi

          ./node_modules/.bin/firebase hosting:clone "${SOURCE_SITE}:${PREVIEW_CHANNEL}" "${STATIC_SITE}:live" --project "${PROJECT_ID}"

      - name: Comment preview URL
        uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ steps.deploy.outputs.preview_url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const marker = '<!-- firebase-preview -->';
            const previewUrl = process.env.PREVIEW_URL;

            if (!previewUrl) {
              throw new Error('Preview URL missing from deploy step output');
            }

            const body = `${marker}\nðŸš€ Firebase preview is ready: ${previewUrl}`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
            const existing = comments.find((comment) => comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }
