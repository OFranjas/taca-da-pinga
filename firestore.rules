rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    function isDataUrl(s) {
      return s is string && s.matches('^data:image/.*');
    }

    function maxImgLen() {
      return 180000;
    }

    function isValidImageDataUrl(dataUrl) {
      return isDataUrl(dataUrl) && dataUrl.size() <= maxImgLen();
    }

    // Leaderboard (teams) — public READ, admin WRITE with invariants
    match /teams/{teamId} {
      allow read: if true;

      // Create/update/delete only by admins
      allow create: if isAdmin() &&
        // New documents must start with non-negative total
        (!('pingas' in request.resource.data) || request.resource.data.pingas >= 0);

      allow update: if isAdmin() && (
        // If pingas is not being changed, allow (for name-only etc.)
        !(request.resource.data.diff(resource.data).changedKeys().hasAny(['pingas'])) ||
        // If pingas changes, enforce bounds and positivity, and types
        (
          (request.resource.data.pingas is int) &&
          (resource.data.pingas is int) &&
          request.resource.data.pingas >= 0 &&
          request.resource.data.pingas > resource.data.pingas &&
          (request.resource.data.pingas - resource.data.pingas) >= 1 &&
          (request.resource.data.pingas - resource.data.pingas) <= 5
        )
      );

      allow delete: if isAdmin();
    }

    // Events — public READ, admin WRITE
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // App config — admin WRITE (reads restricted by default)
    match /app_config/{docId} {
      allow write: if isAdmin();
      allow read: if false;
    }

    // Branding — public READ, admin WRITE with validated data URLs
    match /branding/current {
      allow read: if true;
      allow write: if isAdmin() &&
        (!('mainLogoDataUrl' in request.resource.data) ||
          isValidImageDataUrl(request.resource.data.mainLogoDataUrl)) &&
        (!('iconDataUrl' in request.resource.data) ||
          isValidImageDataUrl(request.resource.data.iconDataUrl));
    }

    function isValidSponsorData(data) {
      return (data.name is string) && (data.name.size() <= 80) &&
        ('link' in data) && (data.link is string) &&
          (data.link.size() == 0 || data.link.matches('^https?://.+')) &&
        ('imageDataUrl' in data) && isValidImageDataUrl(data.imageDataUrl) &&
        ('active' in data) && (data.active is bool) &&
        ('order' in data) && (data.order is int) &&
        data.order >= 0 && data.order <= 999;
    }

    // Sponsors — public READ, admin WRITE with validated fields
    match /sponsors/{sponsorId} {
      allow read: if true;
      allow write: if isAdmin() && isValidSponsorData(request.resource.data);
    }

    // Everything else denied
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
